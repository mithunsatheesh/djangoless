// Generated by CoffeeScript 1.6.2
(function() {
  var FUNCTIONS, flatten,
    __slice = [].slice;

  flatten = function(array) {
    var i, result, _i, _len;

    result = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      i = array[_i];
      if (Array.isArray(i)) {
        result = result.concat(flatten(i));
      } else {
        result.push(i);
      }
    }
    return result;
  };

  FUNCTIONS = {
    alias: function(context, series, legend) {
      var original;

      assert(Array.isArray(series), "Expecting alias(series, legend), first argument not a series name");
      assert(typeof legend === "string", "Expecting alias(series, legend), second argument not a string");
      original = series[0];
      return Series.clone(original, {
        name: legend
      });
    },
    asPercent: function(context, series1, series2orNumber) {
      var fn, name, series2;

      fn = function(_arg) {
        var series1, series2;

        series1 = _arg[0], series2 = _arg[1];
        return series1 / series2 * 100;
      };
      if (typeof series2orNumber === "number") {
        series2 = context.constant(series2orNumber);
        name = "" + series1.name + "/" + series2orNumber + "%";
      } else {
        series2 = series2orNumber[0];
        name = "" + series1.name + "/" + series2orNumber.name + "%";
      }
      return context.combine(name, series1[0], series2, fn);
    },
    averageAbove: function(context, series_list, n) {
      var series;

      return (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = series_list.length; _i < _len; _i++) {
          series = series_list[_i];
          if (average_series(series) > n) {
            _results.push(series);
          }
        }
        return _results;
      })();
    },
    averageBelow: function(context, series_list, n) {
      var series;

      return (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = series_list.length; _i < _len; _i++) {
          series = series_list[_i];
          if (average_series(series) < n) {
            _results.push(series);
          }
        }
        return _results;
      })();
    },
    averageSeries: function() {
      var context, fn, names, series, series_list, series_lists;

      context = arguments[0], series_lists = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      series_list = flatten(series_lists);
      fn = function(values) {
        var count, sum, value, _i, _len;

        sum = 0;
        count = 0;
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          value = values[_i];
          if (value !== void 0) {
            sum += value;
            count++;
          }
        }
        if (count > 0) {
          return sum / count;
        }
      };
      names = ((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = series_list.length; _i < _len; _i++) {
          series = series_list[_i];
          _results.push(series.name);
        }
        return _results;
      })()).join(",");
      return context.combine.apply(context, ["avg(" + names + ")"].concat(__slice.call(series_list), [fn]));
    },
    constantLine: function(context, value) {
      return context.constant(value);
    },
    cumulative: function(context, series_list) {
      var series;

      return (function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = series_list.length; _i < _len; _i++) {
          series = series_list[_i];
          _results.push(series.toCumulative());
        }
        return _results;
      })();
    }
  };

  FUNCTIONS.avg = FUNCTIONS.averageSeries;

  module.exports = FUNCTIONS;

}).call(this);
